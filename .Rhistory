library(dplyr)
library(ggplot2)
library(ggrepel)
library(vegan)
#-------------------------------
# Step 1: Extract significant DEGs
#-------------------------------
# Extract all DE results
results <- topTable(fit.limma, coef = "LCStatusCase", number = Inf)
# Filter for significant DEGs (adjust FDR threshold as needed)
deg <- results %>% filter(adj.P.Val < 0.10)
# Get gene names
deg_genes <- rownames(deg)
#-------------------------------
# Step 2: Subset expression matrix to DEGs
#-------------------------------
deg_expr <- counts_new[deg_genes, ]   # rows = genes, columns = samples
deg_expr_t <- t(deg_expr)             # transpose: rows = samples, columns = genes
#-------------------------------
# Step 3: Merge PCA data with sample metadata
#-------------------------------
pca_result <- prcomp(deg_expr_t, scale. = TRUE)
pca_data <- as.data.frame(pca_result$x)
pca_data$SampleID <- rownames(pca_data)
pca_data <- left_join(pca_data, column_data, by = "SampleID")
#-------------------------------
# Step 4: PERMANOVA and PERMDISP
#-------------------------------
column_data$LCStatus <- as.factor(column_data$LCStatus)
# PERMANOVA
permanova <- adonis2(deg_expr_t ~ LCStatus, data = column_data, method = "euclidean")
print(permanova)
r2 <- round(permanova$R2[1], 3)
pval_permanova <- format.pval(permanova$`Pr(>F)`[1], digits = 3, eps = 0.001)
# PERMDISP
dist_matrix <- dist(deg_expr_t, method = "euclidean")
dispersion <- betadisper(dist_matrix, column_data$LCStatus)
anova_disp <- anova(dispersion)
permutest_disp <- permutest(dispersion)
pval_permdisp <- format.pval(permutest_disp$tab[1, "Pr(>F)"], digits = 3, eps = 0.001)
#-------------------------------
# Step 5: Extract top loading vectors for PCA
#-------------------------------
loadings <- as.data.frame(pca_result$rotation[, 1:2])
loadings$Gene <- rownames(loadings)
loadings$Magnitude <- sqrt(loadings$PC1^2 + loadings$PC2^2)
# Top 10 loading genes
top_loadings <- loadings %>%
arrange(desc(Magnitude)) %>%
slice(1:10)
# Scale top loading vectors for plotting
top_loadings_scaled <- top_loadings %>%
mutate(
PC1 = PC1 * 15,   # scale to make arrows visible
PC2 = PC2 * 15
)
#-------------------------------
# Step 6: PCA Plot with ellipses, vectors, and labels
#-------------------------------
pca_gene <- ggplot(pca_data, aes(x = PC1, y = PC2, color = LCStatus)) +
# Points
geom_point(size = 1, alpha = 0.8) +
# Ellipses per group (default 95% confidence)
stat_ellipse(aes(group = LCStatus), linetype = 2, size = 1, alpha = 0.3) +
# Loading vectors
geom_segment(data = top_loadings_scaled,
aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")),
color = "gray50",
inherit.aes = FALSE) +
# Loading labels
geom_label_repel(data = top_loadings_scaled,
aes(x = PC1, y = PC2, label = Gene),
size = 3,
segment.color = "gray80",
max.overlaps = 100,
inherit.aes = FALSE,
fill = "white",
alpha = 0.8) +
# Labels and titles
labs(
title = "PCA of DEGs (10 most influential genes)",
subtitle = paste0("PERMANOVA: R² = ", r2,
", p = ", pval_permanova,
" | PERMDISP p = ", pval_permdisp),
x = paste0("PC1 (", round(summary(pca_result)$importance[2,1] * 100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_result)$importance[2,2] * 100, 1), "%)")
) +
# Color palette
scale_color_manual(values = c("Control" = "#E69F00", "Case" = "#56B4E9")) +
# Theme
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 10),
plot.subtitle = element_text(size = 10),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 10)
)
# Print plot
print(pca_gene)
#| warning: false
#Step 1: Extract significant DEGs
# Extract all DE results
results <- topTable(fit.limma, coef="LCStatusCase", number=Inf)
# Filter for significant DEGs (adjust as needed)
deg <- results %>%
filter(adj.P.Val < 0.10)
# View top DEGs
head(deg)
str(deg)
#Step 2: Subset your expression matrix to only DEGs
# Get DEG gene names (they're rownames in 'results')
deg_genes <- rownames(deg)
# Subset expression data to just DEGs
deg_expr <- counts_new[deg_genes, ]
#Step 3: Transpose and perform PCA
# Transpose so rows = samples, columns = genes
deg_expr_t <- t(deg_expr)
# Perform PCA
pca <- prcomp(deg_expr_t, scale. = TRUE)
# Combine PCA results with sample metadata
pca_data <- as.data.frame(pca$x)
pca_data$SampleID <- rownames(pca_data)
# Merge with sample info
pca_data <- left_join(pca_data, column_data, by = "SampleID")
#PERMANOVA
library(vegan)
#1. Filter DEGs and prepare expression data (you’ve already done this):
# Keep DEGs with adjusted p-value < 0.10
deg <- results %>%
filter(adj.P.Val < 0.10)
# Get gene names
deg_genes <- rownames(deg)
# Subset expression matrix to DEGs
deg_expr <- counts_new[deg_genes, ]
# Transpose to samples x genes
deg_expr_t <- t(deg_expr)
#2. Run PERMANOVA
library(vegan)
# Make sure grouping variable is a factor
column_data$LCStatus <- as.factor(column_data$LCStatus)
# PERMANOVA: test if expression profiles differ by LCStatus
permanova <- adonis2(deg_expr_t ~ LCStatus, data = column_data, method = "euclidean")
# Inspect result
print(permanova)
# Extract R² and p-value for annotation
r2 <- round(permanova$R2[1], 3)
pval <- permanova$`Pr(>F)`[1]
#PCA and top 10 loading vectors
pca_result <- prcomp(deg_expr_t, scale. = TRUE)
# Create PCA data frame
pca_data <- as.data.frame(pca_result$x)
pca_data$SampleID <- rownames(pca_data)
pca_data <- left_join(pca_data, column_data, by = "SampleID")
# Extract loadings (gene contributions)
loadings <- as.data.frame(pca_result$rotation[, 1:2])
loadings$Gene <- rownames(loadings)
loadings$Magnitude <- sqrt(loadings$PC1^2 + loadings$PC2^2)
# Top 10 loading genes
top_loadings <- loadings %>%
dplyr::arrange(desc(Magnitude)) %>%
dplyr::slice(1:10)
head(top_loadings)
# Run PERMDISP (test homogeneity of group dispersions)
dist_matrix <- dist(deg_expr_t, method = "euclidean")  # distance matrix from DEG expression
dispersion <- betadisper(dist_matrix, column_data$LCStatus)  # group dispersions
anova_disp <- anova(dispersion)          # ANOVA test for dispersions
permutest_disp <- permutest(dispersion)  # permutation test for dispersions
# Print results
print(anova_disp)
print(permutest_disp)
# Optional: visualize dispersions
plot(dispersion)
# Extract stats for annotation
r2 <- round(permanova$R2[1], 3)
pval_permanova <- format.pval(permanova$`Pr(>F)`[1], digits = 3, eps = 0.001)
pval_permdisp <- format.pval(permutest_disp$tab[1, "Pr(>F)"], digits = 3, eps = 0.001)
#PCA Plot with stats_star instead of ellipse
library(ggpubr)
#Scaling the loadings
top_loadings_scaled <- top_loadings %>%
mutate(
PC1 = PC1 * 15,   # enlarge along PC1
PC2 = PC2 * 15    # enlarge along PC2
)
# Final PCA Plot with annotation using stat_stars()
pca_gene <- ggplot(pca_data, aes(x = PC1, y = PC2, color = LCStatus)) +
geom_point(size = 1, alpha = 0.8) +
ggpubr::stat_stars(aes(group = LCStatus), linetype = 2, size = 1) +  # <-- replaced stat_ellipse
# Loading vectors
geom_segment(data = top_loadings_scaled,
aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")),
color = "gray50", fontface = "bold",
inherit.aes = FALSE) +
# Loading labels
geom_label_repel(data = top_loadings_scaled,
aes(x = PC1, y = PC2, label = Gene),
size = 3,
segment.color = "gray80",
max.overlaps = 100,
inherit.aes = FALSE,
fill = "white",
alpha = 0.8) +
labs(
title = "PCA of DEGs (10 most influential genes)",
subtitle = paste0("PERMANOVA: R² = ", r2,
", p = ", pval_permanova,
" | PERMDISP p = ", pval_permdisp),
x = paste0("PC1 (", round(summary(pca_result)$importance[2,1] * 100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_result)$importance[2,2] * 100, 1), "%)")
) +
scale_color_manual(values = c("Control" = "#E69F00", "Case" = "#56B4E9")) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 10),
plot.subtitle = element_text(size = 10),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 10)
)
print(pca_gene)
saveRDS(pca_gene, file = "pca_genes.rds")
#| warning: false
#Step 1: Extract significant DEGs
# Extract all DE results
results <- topTable(fit.limma, coef="LCStatusCase", number=Inf)
# Filter for significant DEGs (adjust as needed)
deg <- results %>%
filter(adj.P.Val < 0.10)
# View top DEGs
head(deg)
str(deg)
#Step 2: Subset your expression matrix to only DEGs
# Get DEG gene names (they're rownames in 'results')
deg_genes <- rownames(deg)
# Subset expression data to just DEGs
deg_expr <- counts_new[deg_genes, ]
#Step 3: Transpose and perform PCA
# Transpose so rows = samples, columns = genes
deg_expr_t <- t(deg_expr)
# Perform PCA
pca <- prcomp(deg_expr_t, scale. = TRUE)
# Combine PCA results with sample metadata
pca_data <- as.data.frame(pca$x)
pca_data$SampleID <- rownames(pca_data)
# Merge with sample info
pca_data <- left_join(pca_data, column_data, by = "SampleID")
#PERMANOVA
library(vegan)
#Step-by-step: Go from your limma results to PERMANOVA + PCA plot
#1. Filter DEGs and prepare expression data (you’ve already done this):
# Keep DEGs with adjusted p-value < 0.10
deg <- results %>%
filter(adj.P.Val < 0.10)
# Get gene names
deg_genes <- rownames(deg)
# Subset expression matrix to DEGs
deg_expr <- counts_new[deg_genes, ]
# Transpose to samples x genes
deg_expr_t <- t(deg_expr)
#2. Run PERMANOVA
library(vegan)
# Make sure grouping variable is a factor
column_data$LCStatus <- as.factor(column_data$LCStatus)
# PERMANOVA: test if expression profiles differ by LCStatus
permanova <- adonis2(deg_expr_t ~ LCStatus, data = column_data, method = "euclidean")
# Inspect result
print(permanova)
# Extract R² and p-value for annotation
r2 <- round(permanova$R2[1], 3)
pval <- permanova$`Pr(>F)`[1]
#PCA and top 10 loading vectors
pca_result <- prcomp(deg_expr_t, scale. = TRUE)
# Create PCA data frame
pca_data <- as.data.frame(pca_result$x)
pca_data$SampleID <- rownames(pca_data)
pca_data <- left_join(pca_data, column_data, by = "SampleID")
# Extract loadings (gene contributions)
loadings <- as.data.frame(pca_result$rotation[, 1:2])
loadings$Gene <- rownames(loadings)
loadings$Magnitude <- sqrt(loadings$PC1^2 + loadings$PC2^2)
# Top 10 loading genes
top_loadings <- loadings %>%
dplyr::arrange(desc(Magnitude)) %>%
dplyr::slice(1:10)
head(top_loadings)
#write.csv(top_loadings, "Discriminatory_Genes_PCA.csv", row.names = FALSE )
# Run PERMDISP (test homogeneity of group dispersions)
dist_matrix <- dist(deg_expr_t, method = "euclidean")  # distance matrix from DEG expression
dispersion <- betadisper(dist_matrix, column_data$LCStatus)  # group dispersions
anova_disp <- anova(dispersion)          # ANOVA test for dispersions
permutest_disp <- permutest(dispersion)  # permutation test for dispersions
# Print results
print(anova_disp)
print(permutest_disp)
# Optional: visualize dispersions
plot(dispersion)
# Extract stats for annotation
r2 <- round(permanova$R2[1], 3)
pval_permanova <- format.pval(permanova$`Pr(>F)`[1], digits = 3, eps = 0.001)
pval_permdisp <- format.pval(permutest_disp$tab[1, "Pr(>F)"], digits = 3, eps = 0.001)
#PCA Plot with stats_star instead of ellipse
library(ggpubr)
#Scaling the loadings
top_loadings_scaled <- top_loadings %>%
mutate(
PC1 = PC1 * 15,   # enlarge along PC1
PC2 = PC2 * 15    # enlarge along PC2
)
# Final PCA Plot with annotation using stat_stars()
pca_gene <- ggplot(pca_data, aes(x = PC1, y = PC2, color = LCStatus)) +
geom_point(size = 1, alpha = 0.8) +
ggpubr::stat_stars(aes(group = LCStatus), linetype = 2, size = 1) +  # <-- replaced stat_ellipse
# Loading vectors
geom_segment(data = top_loadings_scaled,
aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")),
color = "gray50", fontface = "bold",
inherit.aes = FALSE) +
# Loading labels
geom_label_repel(data = top_loadings_scaled,
aes(x = PC1, y = PC2, label = Gene),
size = 3,
segment.color = "gray80",
max.overlaps = 100,
inherit.aes = FALSE,
fill = "white",
alpha = 0.8) +
labs(
title = "PCA of DEGs (10 most influential genes)",
subtitle = paste0("PERMANOVA: R² = ", r2,
", p = ", pval_permanova,
" | PERMDISP p = ", pval_permdisp),
x = paste0("PC1 (", round(summary(pca_result)$importance[2,1] * 100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_result)$importance[2,2] * 100, 1), "%)")
) +
scale_color_manual(values = c("Control" = "#E69F00", "Case" = "#56B4E9")) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 10),
plot.subtitle = element_text(size = 10),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 10)
)
print(pca_gene)
saveRDS(pca_gene, file = "pca_genes.rds")
print(pca_gene)
# Final PCA Plot with annotation using stat_stars()
pca_gene <- ggplot(pca_data, aes(x = PC1, y = PC2, color = LCStatus)) +
geom_point(size = 1, alpha = 0.8) +
ggpubr::stat_stars(aes(group = LCStatus), linetype = 2, size = 1) +  # <-- replaced stat_ellipse
# Loading vectors
geom_segment(data = top_loadings_scaled,
aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")),
color = "gray50", fontface = "bold",
inherit.aes = FALSE) +
# Loading labels
geom_label_repel(data = top_loadings_scaled,
aes(x = PC1, y = PC2, label = Gene),
size = 3,
segment.color = "gray80",
max.overlaps = 100,
inherit.aes = FALSE,
fill = "white",
alpha = 0.9) +
labs(
title = "PCA of DEGs (10 most influential genes)",
subtitle = paste0("PERMANOVA: R² = ", r2,
", p = ", pval_permanova,
" | PERMDISP p = ", pval_permdisp),
x = paste0("PC1 (", round(summary(pca_result)$importance[2,1] * 100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_result)$importance[2,2] * 100, 1), "%)")
) +
scale_color_manual(values = c("Control" = "#E69F00", "Case" = "#56B4E9")) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 10),
plot.subtitle = element_text(size = 10),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 10)
)
print(pca_gene)
saveRDS(pca_gene, file = "pca_genes.rds")
#| warning: false
library(tidyverse)
library(ggrepel)
library(vegan)
library(RColorBrewer)
library(ggpubr)
# 1️⃣ Prepare metabolite matrix and metadata
metabolite_matrix <- Significant_all_imputed_log10[, 12:34]
phenotype <- Significant_all_imputed_log10$Phenotype
# 2️⃣ PCA
pca_result <- prcomp(metabolite_matrix, scale. = TRUE)
pca_scores <- as.data.frame(pca_result$x)
pca_scores$Phenotype <- phenotype
# 3️⃣ PERMANOVA
dist_matrix <- dist(metabolite_matrix, method = "euclidean")
permanova_result <- adonis2(dist_matrix ~ Phenotype, data = Significant_all_imputed_log10, permutations = 999)
r2 <- round(permanova_result$R2[1], 3)
pval_permanova <- format.pval(permanova_result$`Pr(>F)`[1], digits = 3, eps = 0.001)
# 4️⃣ PERMDISP
dispersion <- betadisper(dist_matrix, phenotype)
permutest_disp <- permutest(dispersion)
pval_permdisp <- format.pval(permutest_disp$tab[1, "Pr(>F)"], digits = 3, eps = 0.001)
# 5️⃣ Top 10 metabolite loadings
loadings <- as.data.frame(pca_result$rotation)
loadings$Metabolite <- rownames(loadings)
# Ensure numeric
loadings$PC1 <- as.numeric(loadings$PC1)
loadings$PC2 <- as.numeric(loadings$PC2)
# Contribution for ranking
loadings$contribution <- sqrt(loadings$PC1^2 + loadings$PC2^2)
# Select top 10
top_loadings <- loadings %>%
arrange(desc(contribution)) %>%
slice_head(n = 10) %>%
mutate(
PC1 = PC1 * 5,   # scale arrows for visibility
PC2 = PC2 * 5
)
#Scaling the loadings
top_loadings_scaled <- top_loadings %>%
mutate(
PC1 = PC1 * 1.2,
PC2 = PC2 * 1.2
)
#PCA plot
pca_plot <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Phenotype)) +
geom_point(size = 1, alpha = 0.8) +
ggpubr::stat_stars(aes(group = Phenotype), linetype = 2, size = 1) +
# Loading vectors (scaled)
geom_segment(data = top_loadings_scaled,
aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.2, "cm")),
color = "gray50", inherit.aes = FALSE) +
# Loading labels (scaled)
geom_label_repel(
data = top_loadings_scaled,
aes(x = PC1, y = PC2, label = Metabolite),
size = 3,
segment.color = "gray80",
max.overlaps = 100,
inherit.aes = FALSE,
fill = "white",
alpha = 0.8
) +
labs(
title = "PCA of Metabolites (10 most influential metabolites)",
subtitle = paste0("PERMANOVA: R² = ", r2,
", p = ", pval_permanova,
" | PERMDISP p = ", pval_permdisp),
x = paste0("PC1 (", round(summary(pca_result)$importance[2,1] * 100, 1), "%)"),
y = paste0("PC2 (", round(summary(pca_result)$importance[2,2] * 100, 1), "%)")
) +
scale_color_manual(values = c("Control" = "#E69F00", "Case" = "#56B4E9")) +
scale_y_continuous(limits = c(-7.5, 6)) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 10),
plot.subtitle = element_text(size = 10),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title = element_text(size = 10)
)
print(pca_plot)
# Save
saveRDS(pca_plot, file = "pca_metabolites_final_stars.rds")
#| warning: false
library(ggplot2)
library(patchwork)
# Load all plots
oxo_plot <- readRDS("oxo_plot.rds")
vplot_metabolite <- readRDS("volcanoplot_metabolites.rds")
pca_met <- readRDS("pca_metabolites_final_stars.rds")
vplot_gene <- readRDS("volcanoplot_genes.rds")
pca_gene <- readRDS("pca_genes.rds")
# Combine into 2x2 grid
combined_plot <- (vplot_gene + pca_gene)/ (oxo_plot + pca_met) + plot_annotation(tag_levels = "A")
combined_plot
library(patchwork)
# Remove legends from vplot_gene and pca_gene
vplot_gene_clean <- vplot_gene + theme(legend.position = "none")
pca_gene_clean   <- pca_gene + theme(legend.position = "none")
pca_met_clean   <- pca_met + theme(legend.position = "none")
# Combine plots in 2x2 grid
combined_plot <- (vplot_gene + pca_gene_clean) /
(oxo_plot + pca_met_clean) +
plot_annotation(tag_levels = "A")
combined_plot
ggsave("Metabolomics_Transcriptomics.pdf",
combined_plot,
width = 12, height = 10, units = "in")
ggsave(
filename = "combined_plot.png",   # file path
plot = combined_plot,
width = 12,                                # width in inches
height = 10,                                # height in inches
dpi = 600                                  # resolution
)
# Save as TIFF (600 dpi)
ggsave(
filename = "combined_plot.tiff",
plot = combined_plot,
width = 12, height = 10, units = "in", dpi = 600,
compression = "lzw"   #to reduce size
)
